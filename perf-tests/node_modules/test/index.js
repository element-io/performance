/**
*
*	TEST
*
*
*	DESCRIPTION:
*		- Base Test class.
*
*
*	NOTES:
*		[1] 
*
*
*	TODO:
*		[1] 
*
*
*	LICENSE:
*		MIT
*
*	Copyright (c) 2014. Athan Reines.
*
*
*	AUTHOR:
*		Athan Reines. kgryte@gmail.com. 2014.
*
*/

(function() {
	'use strict';

	// FUNCTIONS //

	/**
	* FUNCTION: mean( data )
	*	Calculates a mean value.
	*
	* @private
	* @param {Array} data - data array
	* @returns {Number} mean value
	*/
	function mean( data ) {
		var total = data.length,
			sum = 0;

		for ( var i = 0; i < total; i++ ) {
			sum += data[ i ];
		}
		return sum / total;
	} // end FUNCTION mean()

	/**
	* FUNCTION: variance( data )
	*	Calculates the sample variance.
	*
	* @private
	* @param {Array } data - data array
	* @returns {Number} variance
	*/
	function variance( data ) {
		var total = data.length,
			N = 0,
			mean = 0,
			M2 = 0,
			delta = 0;

		if ( total < 2 ) {
			return 0;
		}

		for ( var i = 0; i < total; i++ ) {
			N += 1;
			delta = data[ i ] - mean;
			mean += delta / N;
			M2 += delta * ( data[i] - mean );
		}
		return M2 / ( N-1 );
	} // end FUNCTION variance()

	/**
	* FUNCTION: round( d, num )
	*	Rounds a number to a specified number of decimals.
	*
	* @private
	* @param {Numbe} d - number to round
	* @param {Number} num - number of decimals
	* @returns {Number} rounded number
	*/
	function round( d, num ) {
		var scalar = Math.pow( 10, num );
		return Math.round( d*scalar ) / scalar;
	} // end FUNCTION round()


	// TEST //

	/**
	* FUNCTION: Test()
	*	Test constructor.
	*
	* @constructor
	* @returns {Test} Test instance
	*/
	function Test() {
		this._name = '';
		this._desc = '';
		this._data = null;
		this._repeats = 1;
		this._times = [];
		this._ram = [];
		this._heap = [];
		return this;
	} // end FUNCTION Test()

	/**
	* METHOD: name()
	*	Returns the test name.
	*
	* @returns {String} test name
	*/
	Test.prototype.name = function() {
		return this._name;
	}; // end METHOD name()

	/**
	* METHOD: desc()
	*	Returns the test description.
	*
	* @returns {String} test description
	*/
	Test.prototype.desc = function() {
		return this._desc;
	}; // end METHOD desc()

	/**
	* METHOD: data( data )
	*	Sets the test data.
	*
	* @param {Array} data - array of arrays
	* @returns {Test} Test instance
	*/
	Test.prototype.data = function( data ) {
		if ( !Array.isArray( data ) ) {
			throw new TypeError( 'data()::invalid input argument. Data must be an array.' );
		}
		this._data = data;
		return this;
	}; // end METHOD data()

	/**
	* METHOD: repeats( value )
	*	Sets the number of test repeats to perform.
	*
	* @param {Number} value - number of repeats
	* @returns {Test} Test instance
	*/
	Test.prototype.repeats = function( value ) {
		if ( typeof value !== 'number' || value !== value || value < 1 ) {
			throw new TypeError( 'repeats()::invalid input argument. Number of repeats must be a positive number.' );
		}
		value = Math.floor( value );
		this._repeats = value;
		return this;
	}; // end METHOD repeats()

	/**
	* METHOD: times()
	*	Returns the test splits.
	*
	* @returns {Array} array of time splits
	*/
	Test.prototype.times = function() {
		// Return a copy to prevent tampering...
		return JSON.parse( JSON.stringify( this._times ) );
	}; // end METHOD times()

	/**
	* METHOD: heap()
	*	Returns the heap usage.
	*
	* @returns {Number} heap usage
	*/
	Test.prototype.heap = function() {
		// Return a copy to prevent tampering...
		return JSON.parse( JSON.stringify( this._heap ) );
	}; // end METHOD heap()

	/**
	* METHOD: ram()
	*	Returns the RAM usage.
	*
	* @returns {Number} RAM usage
	*/
	Test.prototype.ram = function() {
		// Return a copy to prevent tampering...
		return JSON.parse( JSON.stringify( this._ram ) );
	}; // end METHOD ram()

	/**
	* METHOD: mean( metric )
	*	Returns the mean for a requested metric.
	*
	* @param {String} metric - metric name
	* @returns {Number} metric's mean value
	*/
	Test.prototype.mean = function( metric ) {
		var names = [ 'times', 'heap', 'ram' ];
		if ( typeof metric !== 'string' ) {
			throw new TypeError( 'mean()::invalid input argument. Metric name must be a string.' );
		}
		if ( names.indexOf( metric ) === -1 ) {
			throw new Error( 'mean()::invalid input argument. Unrecognized metric name. Name should be one of the following: [ ' + names.join(',') + ' ].' );
		}
		return mean( this[ '_'+metric ] );
	}; // end METHOD mean()

	/**
	* METHOD: variance( metric )
	*	Returns the variance for a request metric.
	*
	* @param {String} metric - metric name
	* @returns {Number} metric variance
	*/
	Test.prototype.variance = function( metric ) {
		var names = [ 'times', 'heap', 'ram' ];
		if ( typeof metric !== 'string' ) {
			throw new TypeError( 'variance()::invalid input argument. Metric name must be a string.' );
		}
		if ( names.indexOf( metric ) === -1 ) {
			throw new Error( 'variance()::invalid input argument. Unrecognized metric name. Name should be one of the following: [ ' + names.join(',') + ' ].' );
		}
		return variance( this[ '_'+metric ] );
	}; // end METHOD variance()

	/**
	* METHOD: stats()
	*	Convenience method to compute test statistics and return a single stats object.
	*
	* @returns {Object} object containing test stats
	*/
	Test.prototype.stats = function() {
		return {
			'times': [
				round( this.mean( 'times' )/1000, 3 ),
				round( Math.sqrt( this.variance('times' ) )/1000, 3 )
			],
			'heap': [
				round( this.mean( 'heap' ), 3 ),
				round( Math.sqrt( this.variance( 'heap' ) ), 3 )
			],
			'ram': [
				round( this.mean( 'ram' )/1000000, 3 ),
				round( Math.sqrt( this.variance( 'ram' ) )/1000000, 3 )
			]
		};
	}; // end METHOD stats()

	/**
	* METHOD: run()
	*	Test runner.
	*
	* @returns {Test} Test instance
	*/
	Test.prototype.run = function() {
		// Should be overwritten by descendents.
	}; // end METHOD run()


	// EXPORTS //

	module.exports = Test;

})();